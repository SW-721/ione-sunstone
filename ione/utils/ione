#!/usr/bin/ruby

require 'yaml'
ROOT = ENV['IONEROOT']
LOG_ROOT = ENV['IONELOGROOT']
$ione_conf = YAML.load(File.read("#{ROOT}/ione.conf"))

require 'zmqjsonrpc'
uri = "tcp://localhost:#{$ione_conf['Server']['listen-port']}"
client = ZmqJsonRpc::Client.new(uri)

# Prints given log file
def print_log(target)
    puts "#{LOG_ROOT}/#{target}" if ARGV[1] == 'path'
    return if ARGV[1] == 'path'
    if ARGV[2] == 'follow' then
        exec("tail -n #{ARGV[1]} #{LOG_ROOT}/#{target} -f")
        return 
    end
    log = File.read("#{LOG_ROOT}/#{target}").split("\n")
    if ARGV[1] == 'size' then
        puts log.size
    elsif ARGV[1].nil? then
        puts log.join("\n")
    else
        begin
            puts log[-ARGV[1].to_i, ARGV[1].to_i].join("\n")
        rescue => e
            puts log.join("\n")
        end
    end
end

case ARGV[0]
    when 'server'
        if ARGV[1] == 'stop' || ARGV[1] == 'restart' || ARGV[1] == 'start' then
            `systemctl #{ARGV[1]} ione`
        elsif ARGV[1] == 'pid' then
            pid = File.read('/var/run/ione.rb.pid')
            if pid.nil? || pid == '' then
                puts 'No PID file was found'
            else
                puts "IONe running, PID: #{pid}"
            end
        else
            puts 'Undefined key, you may use: stop | start | restart | pid'
        end  
    when 'update'
        if ARGV[1].nil? then
            puts "Type your update token. You can see it at #{ROOT}/modules/updatesmanager/ione.conf"
        else
            puts client.IONeUpdate(ARGV[1])
        end
    when 'log'
        print_log("ione.log")
    when 'debug'
        print_log("debug.log")
    when 'snapshot'
        print_log("snapshot.log")
    when 'sys'
        print_log("sys.log")
    when 'ping'
        begin
            puts 'Ping probe - ok, service is available.' if ZmqJsonRpc::Client.new(uri, 50).Test('PING') == 'PONG'
        rescue => e
            puts 'Service is not available or an error while ping probe occurred...'
        end
    when 'version'
        puts client.version
    when 'uptime'
        puts client.uptime
    when 'proc'
        puts client.proc
    else
        puts "
Help page for ione cli tool:

        server          -----       Initializing server control functions
            stop        -----       Stops server using system.d
            start       -----       Start server using system.d
            restart     -----       Restart server using system.d
            pid         -----       Prints server process PID

        update          -----       Updates your IONe Cloud server
            <string>    -----       Update token
        log             -----       Prints main IONe log
            <number>    -----       Number of lines to print
                follow  -----       Prints log in 'tail -f' mode
            size        -----       Prints number of lines log file contains
            path        -----       Returns log-file path

        debug           -----       Prints IONe debug log -- uses the same params as 'log'
        snapshot        -----       Prints IONe snapshot script log -- uses the same params as 'log'
        sys             -----       Prints IONe sys log
        version         -----       Checks current version of WHMConnect
        uptime          -----       Checks uptime of WHMConnect server
        proc            -----       Prints current working proccesses
"
end